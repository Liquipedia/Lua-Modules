--- Triple Comment to Enable our LLS Plugin
describe('abbreviation', function()
	local Json = require('Module:Json')
	local FnUtil = require('Module:FnUtil')

	--throw error generated by logging an input of the return of `local throw = function() error("TestError") end`
	local throwMsg = '<strong class="error"><span class="scribunto-error" id="mw-scribunto-error-0">'
		.. 'Lua error in Module:Hjpalpha/sandbox16 at line 4: TestError.</span></strong>'
	local expectedErrorMessage = 'Tried to parse Lua error "Module:Hjpalpha/sandbox16 at line 4: TestError"'

	---@param fn fun(str: string, options: {checkForError: boolean?}?): string?
	---@return fun(): string?
	local makeErrorTestThrowFunction = function(fn)
		return FnUtil.curry(FnUtil.curry(fn, throwMsg), {checkForError = true})
	end

	local stringifiedForErrorCheck = '{"1":1,"2":2,"3":3, "abc":{"1":"b","2":"c"}}'
	local parsedForErrorCheck = {1, 2, 3, abc = {'b', 'c'}}

	---@param fn fun(str: string, options: {checkForError: boolean?}?): string?
	---@return fun(): string?
	local makeErrorTestSucceedFunction = function(fn)
		return FnUtil.curry(FnUtil.curry(fn, stringifiedForErrorCheck), {checkForError = true})
	end

	describe('stringify', function()
		it('check', function()
			assert.are_equal('[]', Json.stringify{})
			assert.are_equal('{"abc":"def"}', Json.stringify{abc = 'def'})
			assert.are_equal('{"abc":{"1":"b","2":"c"}}', Json.stringify{abc = {'b', 'c'}})
			assert.are_equal(nil, Json.stringify())
			assert.are_equal('string', Json.stringify('string'))
			assert.are_equal('[1,2,3]', Json.stringify({1, 2, 3}, {asArray = true}))
			assert.are_equal('{"1":1,"2":2,"3":3}', Json.stringify{1, 2, 3})
			assert.is_true(string.len(Json.stringify(mw.loadData('Module:Flags/MasterData'))) > 3)
		end)
	end)

	describe('parse', function()
		it('check', function()
			assert.are_same({}, (Json.parse('[]')))
			assert.are_same({}, (Json.parse('{}')))
			assert.are_same({abc = 'def'}, (Json.parse('{"abc":"def"}')))
			assert.are_same({abc = {'b', 'c'}}, (Json.parse('{"abc":["b","c"]}')))
			assert.are_same({abc = {'b', 'c'}}, (Json.parse('{"abc":{"1":"b","2":"c"}}')))
			assert.are_same({}, (Json.parse{a = 1}))
			assert.are_same({}, (Json.parse('banana')))
			assert.are_same({}, (Json.parse('banana')))
		end)

		it('check for error', function()
			assert.error(makeErrorTestThrowFunction(Json.parse), expectedErrorMessage)
			assert.are_same(makeErrorTestSucceedFunction(Json.parse)(), parsedForErrorCheck)
		end)
	end)

	describe('parseIfString', function()
		it('check', function()
			assert.are_same({}, (Json.parseIfString('[]')))
			assert.are_same({}, (Json.parseIfString('{}')))
			assert.are_same({abc = 'def'}, (Json.parseIfString('{"abc":"def"}')))
			assert.are_same({abc = {'b', 'c'}}, (Json.parseIfString('{"abc":["b","c"]}')))
			assert.are_same({abc = {'b', 'c'}}, (Json.parseIfString('{"abc":{"1":"b","2":"c"}}')))
			assert.are_same({a = 1}, (Json.parseIfString{a = 1}))
			assert.are_same({}, (Json.parseIfString('banana')))
		end)

		it('check for error', function()
			assert.error(makeErrorTestThrowFunction(Json.parseIfString), expectedErrorMessage)
			assert.are_same(makeErrorTestSucceedFunction(Json.parseIfString)(), parsedForErrorCheck)
		end)
	end)

	describe('parseIfTable', function()
		it('check', function()
			assert.are_same({}, (Json.parseIfTable('[]')))
			assert.are_same({}, (Json.parseIfTable('{}')))
			assert.are_same({abc = 'def'}, (Json.parseIfTable('{"abc":"def"}')))
			assert.are_same({abc = {'b', 'c'}}, (Json.parseIfTable('{"abc":["b","c"]}')))
			assert.are_same({abc = {'b', 'c'}}, (Json.parseIfTable('{"abc":{"1":"b","2":"c"}}')))
			assert.are_same(nil, (Json.parseIfTable{a = 1}))
			assert.are_same(nil, (Json.parseIfTable('banana')))
		end)

		it('check for error', function()
			assert.error(makeErrorTestThrowFunction(Json.parseIfTable), expectedErrorMessage)
			assert.are_same(makeErrorTestSucceedFunction(Json.parseIfTable)(), parsedForErrorCheck)
		end)
	end)

	describe('stringifySubTables', function()
		it('check', function()
			assert.are_same({}, Json.stringifySubTables{})
			assert.are_same({abc = 'def'}, Json.stringifySubTables{abc = 'def'})
			assert.are_same({abc = '{"1":"b","2":"c"}'}, Json.stringifySubTables{abc = {'b', 'c'}})
			assert.are_same({a = '{"d":1,"b":"c"}', e = 'f'}, Json.stringifySubTables{a = {b = 'c', d = 1}, e = 'f'})
		end)
	end)

	describe('parseStringified', function()
		it('check', function()
			assert.are_same({}, (Json.parseStringified(Json.stringify{})))
			assert.are_same({abc = 'def'}, (Json.parseStringified(Json.stringify{abc = 'def'})))
			assert.are_same({abc = {'b', 'c'}}, (Json.parseStringified(Json.stringify{abc = {'b', 'c'}})))
			assert.are_same(
				mw.loadData('Module:Flags/MasterData'),
				(Json.parseStringified(Json.stringify(mw.loadData('Module:Flags/MasterData'))))
			)
			assert.are_same({1, 2, 3}, (Json.parseStringified(Json.stringify({1, 2, 3}, {asArray = true}))))
			assert.are_same({1, 2, 3}, (Json.parseStringified(Json.stringify{1, 2, 3})))

			assert.are_same(
				{abc = {'b', 'c'}, b = {'a', 'c'}},
				(Json.parseStringified(Json.stringify{abc = {'b', 'c'}, b = Json.stringify{'a', 'c'}}))
			)
			assert.are_same(
				{abc = {'b', 'c'}, b = {'a', 'c'}},
				(Json.parseStringified('{"b":"{\\"1\\":\\"a\\",\\"2\\":\\"c\\"}","abc":{"1":"b","2":"c"}}'))
			)

			assert.are_same({}, (Json.parseStringified('[]')))
			assert.are_same(nil, (Json.parseStringified()))
			assert.are_same('string', (Json.parseStringified('string')))
			assert.are_same({abc = 'def'}, (Json.parseStringified('{"abc":"def"}')))
			assert.are_same({abc = {'b', 'c'}}, (Json.parseStringified('{"abc":{"1":"b","2":"c"}}')))
			assert.are_same({1, 2, 3}, (Json.parseStringified('[1,2,3]')))
			assert.are_same({1, 2, 3}, (Json.parseStringified('{"1":1,"2":2,"3":3}')))
		end)

		it('check for error', function()
			assert.are_same(Json.parseStringified(stringifiedForErrorCheck), parsedForErrorCheck)
			assert.are_same(Json.parseStringified({checkForError = true}, stringifiedForErrorCheck), parsedForErrorCheck)
			assert.error(function() Json.parseStringified({checkForError = true}, throwMsg) end, expectedErrorMessage)
		end)
	end)

	describe('stringifySubTables', function()
		it('check', function()
			assert.are_same({}, Json.stringifySubTables{})
			assert.are_same({abc = 'def'}, Json.stringifySubTables{abc = 'def'})
			assert.are_same({abc = '{"1":"b","2":"c"}'}, Json.stringifySubTables{abc = {'b', 'c'}})
			assert.are_same({a = '{"d":1,"b":"c"}', e = 'f'}, Json.stringifySubTables{a = {b = 'c', d = 1}, e = 'f'})
		end)
	end)
end)
